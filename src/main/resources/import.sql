INSERT INTO Korean (id, sentence) VALUES(1, '생각을 하지 않는 독서는 음식을 씹지 않고 먹는 것과 같다.');
INSERT INTO Korean (id, sentence) VALUES(2, '술은 인격을 비춰주는 거울이다.');
INSERT INTO Korean (id, sentence) VALUES(3, '부지런한 바보만큼 이웃을 괴롭히는 자는 없다.');
INSERT INTO Korean (id, sentence) VALUES(4, '질병은 입을 좇아 들어가고 화근은 입을 좇아 나온다.');
INSERT INTO Korean (id, sentence) VALUES(5, '행복이란 타인을 행복하게 해주려는 노력의 부산물이다.');
INSERT INTO Korean (id, sentence) VALUES(6, '지혜는 듣는 데서 오고 후회는 말하는 데서 온다.');
INSERT INTO Korean (id, sentence) VALUES(7, '인간은 의욕하는 것, 그리고 창조하는 것에 의해서만 행복하다.');
INSERT INTO Korean (id, sentence) VALUES(8, '말을 많이 하는 것과 말을 잘하는 것은 다르다.');
INSERT INTO Korean (id, sentence) VALUES(9, '탐욕은 일체를 얻고자 욕심내어서 도리어 모든 것을 일어버린다.');
INSERT INTO Korean (id, sentence) VALUES(10, '가장 높은 곳에 올라가려면 가장 낮은 곳부터 시작하라.');
INSERT INTO Korean (id, sentence) VALUES(11, '프로에게서 자기 수련과 극기심을 배워라.');
INSERT INTO Korean (id, sentence) VALUES(12, '오늘 할 수 있는 일에 전력을 다하면 내일은 한걸음 더 진보한다.');
INSERT INTO Korean (id, sentence) VALUES(13, '타인에 대한 존경은 처세법의 제일 조건이다.');
INSERT INTO Korean (id, sentence) VALUES(14, '최대 다수의 최대 행복을 얻는 행동이 최선이다.');
INSERT INTO Korean (id, sentence) VALUES(15, '햇빛은 하나의 초점에 모아질 때만 불꽃을 피우는 법이다.');
INSERT INTO Korean (id, sentence) VALUES(16, '기다림만으로 사는 사람은 굶어서 죽는다.');
INSERT INTO Korean (id, sentence) VALUES(17, '한 사람에게서만 느낄 수 있는 게 사랑이다.');
INSERT INTO Korean (id, sentence) VALUES(18, '좋은 희망을 품는 것은 바로 그것을 이룰 수 있는 지름길이다.');
INSERT INTO Korean (id, sentence) VALUES(19, '끝을 맺기를 처음과 같이 하면 실패가 없다.');
INSERT INTO Korean (id, sentence) VALUES(20, '사랑의 고통은 다른 어떠한 즐거움보다 달콤하다.');
INSERT INTO Korean (id, sentence) VALUES(21, '행운은 마음의 준비가 있는 사람에게만 미소를 짓는다.');
INSERT INTO Korean (id, sentence) VALUES(22, '인간은 생각하는 것이 적으면 그만큼 더 떠든다.');
INSERT INTO Korean (id, sentence) VALUES(23, '돈은 거름과 같아서 뿌리지 않으면 썩기 쉽다.');
INSERT INTO Korean (id, sentence) VALUES(24, '부끄러움을 모르는 것은 부끄러운 일이다.');
INSERT INTO Korean (id, sentence) VALUES(25, '사랑은 지배하는 것이 아니라 자유를 주는 것이다.');
INSERT INTO Korean (id, sentence) VALUES(26, '행복은 지배하여야 하고 불행은 극복해야 한다.');
INSERT INTO Korean (id, sentence) VALUES(27, '가난하되 만족하면 더할 나위 없는 부자다.');
INSERT INTO Korean (id, sentence) VALUES(28, '주먹을 꽉 쥔 손과는 악수를 할 수 없다.');
INSERT INTO Korean (id, sentence) VALUES(29, '행운의 여신은 용기 있는 자를 좋아한다.');
INSERT INTO Korean (id, sentence) VALUES(30, '준비하지 않은 자는 기회가 와도 소용없다.');
INSERT INTO Korean (id, sentence) VALUES(31, '모험은 그 자체만으로도 해볼 만한 가치가 있다.');
INSERT INTO Korean (id, sentence) VALUES(32, '꿈이 없다면 아무 일도 일어나지 않는다.');
INSERT INTO Korean (id, sentence) VALUES(33, '무엇을 시도할 용기도 없으면서 멋진 삶을 바란단 말인가.');
INSERT INTO Korean (id, sentence) VALUES(34, '가장 높이 나는 갈매기가 가장 멀리 본다.');
INSERT INTO Korean (id, sentence) VALUES(35, '언제나 현재에 집중할 수 있다면 행복할 것이다.');
INSERT INTO Korean (id, sentence) VALUES(36, '생각을 집중해야 바라던 결과를 얻을 수 있다.');
INSERT INTO Korean (id, sentence) VALUES(37, '시간은 언제 까지든 당신을 기다리는 것은 아니다.');
INSERT INTO Korean (id, sentence) VALUES(38, '오늘 죽을 것처럼 행동하고 영원히 살 것처럼 배워라.');
INSERT INTO Korean (id, sentence) VALUES(39, '앞서 가는 방법의 비밀은 시작하는 것이다.');
INSERT INTO Korean (id, sentence) VALUES(40, '때때로 우리는 너무 많이 생각하고, 너무 적게 느낀다.');
INSERT INTO Korean (id, sentence) VALUES(41, '시간은 인간이 쓸 수 있는 가장 값진 것이다.');
INSERT INTO Korean (id, sentence) VALUES(42, '시간은 가장 희소가치가 있는 부족한 자원이다.');
INSERT INTO Korean (id, sentence) VALUES(43, '태만을 즐기고 있을 때는 태만함을 느끼지 못한다.');
INSERT INTO Korean (id, sentence) VALUES(44, '다른 사람의 좋은 습관을 내 습관으로 만들어라.');
INSERT INTO Korean (id, sentence) VALUES(45, '산다는 것은 호흡하는 것이 아니라 행동하는 것이다.');
INSERT INTO Korean (id, sentence) VALUES(46, '가장 어두운 밤도 언젠간 끝나고 해는 떠오를 것이다.');
INSERT INTO Korean (id, sentence) VALUES(47, '상황을 가장 잘 활용하는 사람이 가장 좋은 상황을 맞는다.');
INSERT INTO Korean (id, sentence) VALUES(48, '강한자가 살아남는 것이 아니라 살아남는 자가 강한 것이다.');
INSERT INTO Korean (id, sentence) VALUES(49, '진실은 반드시 따르는 자가 있고 정의는 반드시 이루는 날이 있다.');
INSERT INTO Korean (id, sentence) VALUES(50, '근심 속에 낙이 있고 낙 가운데 근심이 있다.');
INSERT INTO Korean (id, sentence) VALUES(51, '스스로의 힘으로 실천하지 않는 것은 자포자기와 같다.');

INSERT INTO English (id, lang, sentence) VALUES(1, 'JAVA', 'public class JSONDataProcessor {');
INSERT INTO English (id, lang, sentence) VALUES(2, 'JAVA', '    public void processJSONData(String jsonData) {');
INSERT INTO English (id, lang, sentence) VALUES(3, 'JAVA', '        Gson gson = new Gson();');
INSERT INTO English (id, lang, sentence) VALUES(4, 'JAVA', '        JsonObject jsonObject = gson.fromJson(jsonData, JsonObject.class);');
INSERT INTO English (id, lang, sentence) VALUES(5, 'JAVA', '        for (String key : jsonObject.keySet()) {');
INSERT INTO English (id, lang, sentence) VALUES(6, 'JAVA', '            System.out.println("Key: " + key);');
INSERT INTO English (id, lang, sentence) VALUES(7, 'JAVA', '           JsonElement element = jsonObject.get(key);');
INSERT INTO English (id, lang, sentence) VALUES(8, 'JAVA', '            if (element.isJsonObject()) {');
INSERT INTO English (id, lang, sentence) VALUES(9, 'JAVA', '                System.out.println("JSON object.");');
INSERT INTO English (id, lang, sentence) VALUES(10, 'JAVA', '                JsonObject nestedObject = element.getAsJsonObject();');
INSERT INTO English (id, lang, sentence) VALUES(11, 'JAVA', '                processNestedObject(nestedObject);');
INSERT INTO English (id, lang, sentence) VALUES(12, 'JAVA', '            } else if (element.isJsonArray()) {');
INSERT INTO English (id, lang, sentence) VALUES(13, 'JAVA', '                System.out.println("JSON array.");');
INSERT INTO English (id, lang, sentence) VALUES(14, 'JAVA', '                JsonArray jsonArray = element.getAsJsonArray();');
INSERT INTO English (id, lang, sentence) VALUES(15, 'JAVA', '                processJsonArray(jsonArray);');
INSERT INTO English (id, lang, sentence) VALUES(16, 'JAVA', '            } else {');
INSERT INTO English (id, lang, sentence) VALUES(17, 'JAVA', '                System.out.println("Value is a primitive type: " + element.toString());');
INSERT INTO English (id, lang, sentence) VALUES(18, 'JAVA', '            }');
INSERT INTO English (id, lang, sentence) VALUES(19, 'JAVA', '        }');
INSERT INTO English (id, lang, sentence) VALUES(20, 'JAVA', '    }');
INSERT INTO English (id, lang, sentence) VALUES(21, 'JAVA', '#');
INSERT INTO English (id, lang, sentence) VALUES(22, 'JAVA', 'public static int[][] multiply(int[][] matrixA, int[][] matrixB) {');
INSERT INTO English (id, lang, sentence) VALUES(23, 'JAVA', '    int rowsA = matrixA.length;');
INSERT INTO English (id, lang, sentence) VALUES(24, 'JAVA', '    int colsA = matrixA[0].length;');
INSERT INTO English (id, lang, sentence) VALUES(25, 'JAVA', '    int colsB = matrixB[0].length;');
INSERT INTO English (id, lang, sentence) VALUES(26, 'JAVA', '    if (matrixB.length != colsA) {');
INSERT INTO English (id, lang, sentence) VALUES(27, 'JAVA', '        throw new IllegalArgumentException("Incorrect dimensions.");');
INSERT INTO English (id, lang, sentence) VALUES(28, 'JAVA', '    }');
INSERT INTO English (id, lang, sentence) VALUES(29, 'JAVA', '    int[][] result = new int[rowsA][colsB];');
INSERT INTO English (id, lang, sentence) VALUES(30, 'JAVA', '    for (int i = 0; i < rowsA; i++) {');
INSERT INTO English (id, lang, sentence) VALUES(31, 'JAVA', '        for (int j = 0; j < colsB; j++) {');
INSERT INTO English (id, lang, sentence) VALUES(32, 'JAVA', '            for (int k = 0; k < colsA; k++) {');
INSERT INTO English (id, lang, sentence) VALUES(33, 'JAVA', '                result[i][j] += matrixA[i][k] * matrixB[k][j];');
INSERT INTO English (id, lang, sentence) VALUES(34, 'JAVA', '            }');
INSERT INTO English (id, lang, sentence) VALUES(35, 'JAVA', '        }');
INSERT INTO English (id, lang, sentence) VALUES(36, 'JAVA', '    }');
INSERT INTO English (id, lang, sentence) VALUES(37, 'JAVA', '    return result;');
INSERT INTO English (id, lang, sentence) VALUES(38, 'JAVA', '}');
INSERT INTO English (id, lang, sentence) VALUES(39, 'JAVA', '#');
INSERT INTO English (id, lang, sentence) VALUES(40, 'JAVA', 'public void addEdge(int source, int destination) {');
INSERT INTO English (id, lang, sentence) VALUES(41, 'JAVA', '    if (adjacencyList.containsKey(source) && adjacencyList.containsKey(destination)) {');
INSERT INTO English (id, lang, sentence) VALUES(42, 'JAVA', '        List<Integer> edges = adjacencyList.get(source);');
INSERT INTO English (id, lang, sentence) VALUES(43, 'JAVA', '        edges.add(destination);');
INSERT INTO English (id, lang, sentence) VALUES(44, 'JAVA', '    } else {');
INSERT INTO English (id, lang, sentence) VALUES(45, 'JAVA', '        System.out.println("Invalid edge.");');
INSERT INTO English (id, lang, sentence) VALUES(46, 'JAVA', '    }');
INSERT INTO English (id, lang, sentence) VALUES(47, 'JAVA', '}');
INSERT INTO English (id, lang, sentence) VALUES(48, 'JAVA', '#');
INSERT INTO English (id, lang, sentence) VALUES(49, 'JAVA', 'public void processDatabase() {');
INSERT INTO English (id, lang, sentence) VALUES(50, 'JAVA', '    Map<Integer, List<Order>> userOrders = new HashMap<>();');
INSERT INTO English (id, lang, sentence) VALUES(51, 'JAVA', '    for (Order order : orders) {');
INSERT INTO English (id, lang, sentence) VALUES(52, 'JAVA', '        int userId = order.getUserId();');
INSERT INTO English (id, lang, sentence) VALUES(53, 'JAVA', '        userOrders.putIfAbsent(userId, new ArrayList<>());');
INSERT INTO English (id, lang, sentence) VALUES(54, 'JAVA', '        userOrders.get(userId).add(order);');
INSERT INTO English (id, lang, sentence) VALUES(55, 'JAVA', '   }');
INSERT INTO English (id, lang, sentence) VALUES(56, 'JAVA', '}');
INSERT INTO English (id, lang, sentence) VALUES(57, 'JAVA', '#');
INSERT INTO English (id, lang, sentence) VALUES(58, 'JAVA', 'public static void printMatrix(int[][] matrix) {');
INSERT INTO English (id, lang, sentence) VALUES(59, 'JAVA', '    for (int[] row : matrix) {');
INSERT INTO English (id, lang, sentence) VALUES(60, 'JAVA', '        for (int cell : row) {');
INSERT INTO English (id, lang, sentence) VALUES(61, 'JAVA', '        }');
INSERT INTO English (id, lang, sentence) VALUES(62, 'JAVA', '        System.out.println();');
INSERT INTO English (id, lang, sentence) VALUES(63, 'JAVA', '    }');
INSERT INTO English (id, lang, sentence) VALUES(64, 'JAVA', '}');

INSERT INTO English (id, lang, sentence) VALUES(65, 'PYTHON', 'def dna_analysis(dna_sequence):');
INSERT INTO English (id, lang, sentence) VALUES(66, 'PYTHON', '    def gc_content(dna):');
INSERT INTO English (id, lang, sentence) VALUES(67, 'PYTHON', '        gc_count = dna.count(\"G\") + dna.count(\"C\")');
INSERT INTO English (id, lang, sentence) VALUES(68, 'PYTHON', '        total_bases = len(dna)');
INSERT INTO English (id, lang, sentence) VALUES(69, 'PYTHON', '        gc_percentage = (gc_count / total_bases) * 100');
INSERT INTO English (id, lang, sentence) VALUES(70, 'PYTHON', '        return gc_percentage');
INSERT INTO English (id, lang, sentence) VALUES(71, 'PYTHON', '    def find_sequence(dna, subsequence):');
INSERT INTO English (id, lang, sentence) VALUES(72, 'PYTHON', '        occurrences = [i for i in range(len(dna)) if dna.startswith(subsequence, i)]');
INSERT INTO English (id, lang, sentence) VALUES(73, 'PYTHON', '        return occurrences');
INSERT INTO English (id, lang, sentence) VALUES(74, 'PYTHON', '    content = gc_content(dna_sequence)');
INSERT INTO English (id, lang, sentence) VALUES(75, 'PYTHON', '    sequence_positions = find_sequence(dna_sequence, \"ATG\")');
INSERT INTO English (id, lang, sentence) VALUES(76, 'PYTHON', '    return content, sequence_positions');
INSERT INTO English (id, lang, sentence) VALUES(77, 'PYTHON', '#');
INSERT INTO English (id, lang, sentence) VALUES(78, 'PYTHON', 'def prepend_path(self, name: str, paths: List[str]) -> None:');
INSERT INTO English (id, lang, sentence) VALUES(79, 'PYTHON', '        old_val = self.env.get(name)');
INSERT INTO English (id, lang, sentence) VALUES(80, 'PYTHON', '        paths = [p for p in paths if isdir(p)]');
INSERT INTO English (id, lang, sentence) VALUES(81, 'PYTHON', '        if not paths:');
INSERT INTO English (id, lang, sentence) VALUES(82, 'PYTHON', '            return');
INSERT INTO English (id, lang, sentence) VALUES(83, 'PYTHON', '       if old_val is not None:');
INSERT INTO English (id, lang, sentence) VALUES(84, 'PYTHON', '            new_val = \":\".join(itertools.chain(paths, [old_val]))');
INSERT INTO English (id, lang, sentence) VALUES(85, 'PYTHON', '        else:');
INSERT INTO English (id, lang, sentence) VALUES(86, 'PYTHON', '            new_val = \":\".join(paths)');
INSERT INTO English (id, lang, sentence) VALUES(87, 'PYTHON', '        self.env[name] = new_val');
INSERT INTO English (id, lang, sentence) VALUES(88, 'PYTHON', '#');
INSERT INTO English (id, lang, sentence) VALUES(89, 'PYTHON', 'def complex_sum_of_squares(start, end):');
INSERT INTO English (id, lang, sentence) VALUES(90, 'PYTHON', '    def sum_of_squares(num_list):');
INSERT INTO English (id, lang, sentence) VALUES(91, 'PYTHON', '        return sum(x**2 for x in num_list)');
INSERT INTO English (id, lang, sentence) VALUES(92, 'PYTHON', '    even_numbers = [x for x in range(start, end + 1) if x % 2 == 0]');
INSERT INTO English (id, lang, sentence) VALUES(93, 'PYTHON', '    odd_numbers = [x for x in range(start, end + 1) if x % 2 != 0]');
INSERT INTO English (id, lang, sentence) VALUES(94, 'PYTHON', '    even_sum_of_squares = sum_of_squares(even_numbers)');
INSERT INTO English (id, lang, sentence) VALUES(95, 'PYTHON', '    odd_sum_of_squares = sum_of_squares(odd_numbers)');
INSERT INTO English (id, lang, sentence) VALUES(96, 'PYTHON', '    return even_sum_of_squares, odd_sum_of_squares');
INSERT INTO English (id, lang, sentence) VALUES(97, 'PYTHON', '#');
INSERT INTO English (id, lang, sentence) VALUES(98, 'PYTHON', 'def add_stdlibsamples(driver):');
INSERT INTO English (id, lang, sentence) VALUES(99, 'PYTHON', '    seen = set()');
INSERT INTO English (id, lang, sentence) VALUES(100, 'PYTHON', '    driver_versions = ["v1.0", "v2.0", "v3.0"]');
INSERT INTO English (id, lang, sentence) VALUES(101, 'PYTHON', '    for version in driver_versions:');
INSERT INTO English (id, lang, sentence) VALUES(102, 'PYTHON', '        stdlibsamples_dir = join(driver.cwd, "test-data", "stdlib-samples", version)');
INSERT INTO English (id, lang, sentence) VALUES(103, 'PYTHON', '        modules = []');
INSERT INTO English (id, lang, sentence) VALUES(104, 'PYTHON', '        for dirpath, _, files in walk(stdlibsamples_dir):');
INSERT INTO English (id, lang, sentence) VALUES(105, 'PYTHON', '            for f in files:');
INSERT INTO English (id, lang, sentence) VALUES(106, 'PYTHON', '                if f.startswith("test_") and f.endswith(".py"):');
INSERT INTO English (id, lang, sentence) VALUES(107, 'PYTHON', '                    module = f[len(stdlibsamples_dir) + 1:].replace(".py", '').replace("/", ".")');
INSERT INTO English (id, lang, sentence) VALUES(108, 'PYTHON', '                    if module not in seen:');
INSERT INTO English (id, lang, sentence) VALUES(109, 'PYTHON', '                        seen.add(module)');
INSERT INTO English (id, lang, sentence) VALUES(110, 'PYTHON', '                        modules.append(module)');
INSERT INTO English (id, lang, sentence) VALUES(111, 'PYTHON', '        if modules:');
INSERT INTO English (id, lang, sentence) VALUES(112, 'PYTHON', '            driver.add_mypy_modules(f"stdlibsamples ({version})", modules, cwd=stdlibsamples_dir)');
INSERT INTO English (id, lang, sentence) VALUES(113, 'PYTHON', '#');
INSERT INTO English (id, lang, sentence) VALUES(114, 'PYTHON', 'def add_stdlibsamples(driver: Driver) -> None:');
INSERT INTO English (id, lang, sentence) VALUES(115, 'PYTHON', 'seen = set()');
INSERT INTO English (id, lang, sentence) VALUES(116, 'PYTHON', 'for version in driver.versions:');
INSERT INTO English (id, lang, sentence) VALUES(117, 'PYTHON', '    stdlibsamples_dir = join(driver.cwd, "test-data", "stdlib-samples", version)');
INSERT INTO English (id, lang, sentence) VALUES(118, 'PYTHON', '    modules = []');
INSERT INTO English (id, lang, sentence) VALUES(119, 'PYTHON', '    for f in find_files(stdlibsamples_dir, prefix="test_", suffix=".py"):');
INSERT INTO English (id, lang, sentence) VALUES(120, 'PYTHON', '        module = file_to_module(f[len(stdlibsamples_dir) + 1:])');
INSERT INTO English (id, lang, sentence) VALUES(121, 'PYTHON', '        if module not in seen:');
INSERT INTO English (id, lang, sentence) VALUES(122, 'PYTHON', '            seen.add(module)');
INSERT INTO English (id, lang, sentence) VALUES(123, 'PYTHON', '            modules.append(module)');
INSERT INTO English (id, lang, sentence) VALUES(124, 'PYTHON', '    if modules:');
INSERT INTO English (id, lang, sentence) VALUES(125, 'PYTHON', '        driver.add_mypy_modules("stdlibsamples (%s)" % (version,), modules, cwd=stdlibsamples_dir)');

INSERT INTO English (id, lang, sentence) VALUES(126, 'C', 'int partition(int arr[], int low, int high) {');
INSERT INTO English (id, lang, sentence) VALUES(127, 'C', '    int pivot = arr[high];');
INSERT INTO English (id, lang, sentence) VALUES(128, 'C', '    int i = (low - 1);');
INSERT INTO English (id, lang, sentence) VALUES(129, 'C', '    for (int j = low; j <= high - 1; j++) {');
INSERT INTO English (id, lang, sentence) VALUES(130, 'C', '        if (arr[j] < pivot) {');
INSERT INTO English (id, lang, sentence) VALUES(131, 'C', '            i++;');
INSERT INTO English (id, lang, sentence) VALUES(132, 'C', '            swap(&arr[i], &arr[j]);');
INSERT INTO English (id, lang, sentence) VALUES(133, 'C', '        }');
INSERT INTO English (id, lang, sentence) VALUES(134, 'C', '    }');
INSERT INTO English (id, lang, sentence) VALUES(135, 'C', '    swap(&arr[i + 1], &arr[high]);');
INSERT INTO English (id, lang, sentence) VALUES(136, 'C', '    return (i + 1);');
INSERT INTO English (id, lang, sentence) VALUES(137, 'C', '}');
INSERT INTO English (id, lang, sentence) VALUES(138, 'C', '#');
INSERT INTO English (id, lang, sentence) VALUES(139, 'C', 'void matrixMulti(int mat1[N][N], int mat2[N][N], int result[N][N]) {');
INSERT INTO English (id, lang, sentence) VALUES(141, 'C', '    int i, j, k;');
INSERT INTO English (id, lang, sentence) VALUES(142, 'C', '    for (i = 0; i < N; i++) {');
INSERT INTO English (id, lang, sentence) VALUES(143, 'C', '        for (j = 0; j < N; j++) {');
INSERT INTO English (id, lang, sentence) VALUES(144, 'C', '            result[i][j] = 0;');
INSERT INTO English (id, lang, sentence) VALUES(145, 'C', '            for (k = 0; k < N; k++) {');
INSERT INTO English (id, lang, sentence) VALUES(146, 'C', '                result[i][j] += mat1[i][k] * mat2[k][j];');
INSERT INTO English (id, lang, sentence) VALUES(147, 'C', '            }');
INSERT INTO English (id, lang, sentence) VALUES(148, 'C', '        }');
INSERT INTO English (id, lang, sentence) VALUES(149, 'C', '    }');
INSERT INTO English (id, lang, sentence) VALUES(150, 'C', '}');
INSERT INTO English (id, lang, sentence) VALUES(151, 'C', '#');
INSERT INTO English (id, lang, sentence) VALUES(152, 'C', 'void quickSort(int arr[], int low, int high) {');
INSERT INTO English (id, lang, sentence) VALUES(153, 'C', '    if (low < high) {');
INSERT INTO English (id, lang, sentence) VALUES(154, 'C', '        int pi = partition(arr, low, high);');
INSERT INTO English (id, lang, sentence) VALUES(155, 'C', '        quickSort(arr, low, pi - 1);');
INSERT INTO English (id, lang, sentence) VALUES(156, 'C', '        quickSort(arr, pi + 1, high);');
INSERT INTO English (id, lang, sentence) VALUES(157, 'C', '    }');
INSERT INTO English (id, lang, sentence) VALUES(158, 'C', '}');
INSERT INTO English (id, lang, sentence) VALUES(159, 'C', '#');
INSERT INTO English (id, lang, sentence) VALUES(160, 'C', 'unsigned long long factorial(unsigned int n) {');
INSERT INTO English (id, lang, sentence) VALUES(161, 'C', '    if (n == 0 || n == 1) {');
INSERT INTO English (id, lang, sentence) VALUES(162, 'C', '        return 1;');
INSERT INTO English (id, lang, sentence) VALUES(163, 'C', '    } else {');
INSERT INTO English (id, lang, sentence) VALUES(164, 'C', '        return n * factorial(n - 1);');
INSERT INTO English (id, lang, sentence) VALUES(165, 'C', '    }');
INSERT INTO English (id, lang, sentence) VALUES(166, 'C', '}');
INSERT INTO English (id, lang, sentence) VALUES(167, 'C', '#');
INSERT INTO English (id, lang, sentence) VALUES(168, 'C', 'int main() {');
INSERT INTO English (id, lang, sentence) VALUES(169, 'C', '    int arr[] = {64, 25, 12, 22, 11};');
INSERT INTO English (id, lang, sentence) VALUES(170, 'C', '    int n = sizeof(arr) / sizeof(arr[0]);');
INSERT INTO English (id, lang, sentence) VALUES(171, 'C', '    printf("Unsorted array: \n");');
INSERT INTO English (id, lang, sentence) VALUES(172, 'C', '    printArray(arr, n);');
INSERT INTO English (id, lang, sentence) VALUES(173, 'C', '    quickSort(arr, 0, n - 1);');
INSERT INTO English (id, lang, sentence) VALUES(174, 'C', '    printf("Sorted array in ascending order: \n");');
INSERT INTO English (id, lang, sentence) VALUES(175, 'C', '    printArray(arr, n);');
INSERT INTO English (id, lang, sentence) VALUES(176, 'C', '    return 0;');
INSERT INTO English (id, lang, sentence) VALUES(177, 'C', '}');
INSERT INTO English (id, lang, sentence) VALUES(178, 'C', '#');
INSERT INTO English (id, lang, sentence) VALUES(179, 'C', 'void insertionSort(int arr[], int n) {');
INSERT INTO English (id, lang, sentence) VALUES(180, 'C', '    int i, key, j;');
INSERT INTO English (id, lang, sentence) VALUES(181, 'C', '    for (i = 1; i < n; i++) {');
INSERT INTO English (id, lang, sentence) VALUES(182, 'C', '        key = arr[i];');
INSERT INTO English (id, lang, sentence) VALUES(183, 'C', '        j = i - 1;');
INSERT INTO English (id, lang, sentence) VALUES(184, 'C', '        while (j >= 0 && arr[j] > key) {');
INSERT INTO English (id, lang, sentence) VALUES(185, 'C', '            arr[j + 1] = arr[j];');
INSERT INTO English (id, lang, sentence) VALUES(186, 'C', '            j = j - 1;');
INSERT INTO English (id, lang, sentence) VALUES(187, 'C', '        }');
INSERT INTO English (id, lang, sentence) VALUES(188, 'C', '        arr[j + 1] = key;');
INSERT INTO English (id, lang, sentence) VALUES(189, 'C', '    }');
INSERT INTO English (id, lang, sentence) VALUES(190, 'C', '}');